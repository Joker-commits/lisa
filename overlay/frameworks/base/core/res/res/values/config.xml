<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2012, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <!-- The bounding path of the cutout region of the main built-in display.
         Must either be empty if there is no cutout region, or a string that is parsable by
         {@link android.util.PathParser}.
         The path is assumed to be specified in display coordinates with pixel units and in
         the display's native orientation, with the origin of the coordinate system at the
         center top of the display.
         To facilitate writing device-independent emulation overlays, the marker `@dp` can be
         appended after the path string to interpret coordinates in dp instead of px units.
         Note that a physical cutout should be configured in pixels for the best results.
         Example for a 10px x 10px square top-center cutout:
                <string ...>M -5,0 L -5,10 L 5,10 L 5,0 Z</string>
         Example for a 10dp x 10dp square top-center cutout:
                <string ...>M -5,0 L -5,10 L 5,10 L 5,0 Z @dp</string>
         @see https://www.w3.org/TR/SVG/paths.html#PathData
    -->
    <string name="config_mainBuiltInDisplayCutout">
        M 0,0 H 144 V 104 H 0 V 0 Z @left
    </string>
    
    <!-- Array of hysteresis constraint values for brightening, represented as tenths of a
         percent. The length of this array is assumed to be one greater than
         config_ambientThresholdLevels. The brightening threshold is calculated as
         lux * (1.0f + CONSTRAINT_VALUE). When the current lux is higher than this threshold,
         the screen brightness is recalculated. See the config_ambientThresholdLevels
         description for how the constraint value is chosen. -->
     <integer-array name="config_ambientBrighteningThresholds">
        <item>2</item>
        <item>5</item>
        <item>10</item>
        <item>30</item>
        <item>100</item>
        <item>400</item>
        <item>600</item>
        <item>1000</item>
     </integer-array>

     <!-- Array of hysteresis constraint values for darkening, represented as tenths of a
         percent. The length of this array is assumed to be one greater than
         config_ambientThresholdLevels. The darkening threshold is calculated as
         lux * (1.0f - CONSTRAINT_VALUE). When the current lux is lower than this threshold,
         the screen brightness is recalculated. See the config_ambientThresholdLevels
         description for how the constraint value is chosen. -->
     <integer-array name="config_ambientDarkeningThresholds">
        <item>800</item>
        <item>800</item>
        <item>500</item>
        <item>500</item>
        <item>500</item>
        <item>500</item>
        <item>500</item>
        <item>500</item>
    </integer-array>

    <!-- Array of ambient lux threshold values. This is used for determining hysteresis constraint
         values by calculating the index to use for lookup and then setting the constraint value
         to the corresponding value of the array. The new brightening hysteresis constraint value
         is the n-th element of config_ambientBrighteningThresholds, and the new darkening
         hysteresis constraint value is the n-th element of config_ambientDarkeningThresholds.
         The (zero-based) index is calculated as follows: (MAX is the largest index of the array)
         condition                       calculated index
         value < level[0]                0
         level[n] <= value < level[n+1]  n+1
         level[MAX] <= value             MAX+1 -->
     <integer-array name="config_ambientThresholdLevels">
        <item>2</item>
        <item>10</item>
        <item>30</item>
        <item>100</item>
        <item>800</item>
        <item>2000</item>
        <item>4000</item>
     </integer-array>

     <!-- Array of desired screen brightness in nits corresponding to the lux values
         in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
         config_screenBrightnessMaximumNits, the display brightness is defined as the measured
         brightness of an all-white image.
         If this is defined then:
            - config_autoBrightnessLcdBacklightValues should not be defined
            - config_screenBrightnessNits must be defined
            - config_screenBrightnessBacklight must be defined
         This array should have size one greater than the size of the config_autoBrightnessLevels
         array. The brightness values must be non-negative and non-decreasing. This must be
         overridden in platform specific overlays -->
     <array name="config_autoBrightnessDisplayValuesNits">
        <item>4.5</item>
        <item>6.6</item>
        <item>8.0</item>
        <item>20.0</item>
        <item>24.3</item>
        <item>29.7</item>
        <item>34.0</item>
        <item>46.0</item>
        <item>59.0</item>
        <item>76.0</item>
        <item>81.0</item>
        <item>82.0</item>
        <item>82.0</item>
        <item>82.0</item>
        <item>83.0</item>
        <item>83.0</item>
        <item>83.0</item>
        <item>84.0</item>
        <item>84.0</item>
        <item>85.0</item>
        <item>85.0</item>
        <item>85.0</item>
        <item>85.0</item>
        <item>86.0</item>
        <item>86.0</item>
        <item>87.0</item>
        <item>89.0</item>
        <item>90.0</item>
        <item>91.0</item>
        <item>93.0</item>
        <item>94.0</item>
        <item>96.0</item>
        <item>97.0</item>
        <item>99.0</item>
        <item>100.0</item>
        <item>101.0</item>
        <item>104.0</item>
        <item>105.0</item>
        <item>106.0</item>
        <item>108.0</item>
        <item>109.0</item>
        <item>111.0</item>
        <item>112.0</item>
        <item>114.0</item>
        <item>116.0</item>
        <item>137.0</item>
        <item>157.0</item>
        <item>180.0</item>
        <item>205.0</item>
        <item>226.0</item>
        <item>257.0</item>
        <item>280.0</item>
        <item>295.0</item>
        <item>369.0</item>
        <item>400.0</item>
        <item>416.7</item>
        <item>433.3</item>
        <item>450.0</item>
        <item>466.7</item>
        <item>483.3</item>
        <item>500.0</item>
        <item>512.5</item>
        <item>525.0</item>
        <item>537.5</item>
        <item>550.0</item>
        <item>562.5</item>
        <item>575.0</item>
        <item>587.5</item>
        <item>600.0</item>
        <item>610.0</item>
        <item>620.0</item>
        <item>630.0</item>
        <item>640.0</item>
        <item>650.0</item>
        <item>660.0</item>
        <item>670.0</item>
        <item>680.0</item>
        <item>690.0</item>
        <item>700.0</item>
        <item>705.0</item>
        <item>710.0</item>
        <item>715.0</item>
        <item>720.0</item>
        <item>725.0</item>
        <item>730.0</item>
        <item>735.0</item>
        <item>740.0</item>
        <item>745.0</item>
        <item>750.0</item>
        <item>755.0</item>
        <item>760.0</item>
        <item>765.0</item>
        <item>770.0</item>
        <item>775.0</item>
        <item>800.0</item>
        <item>816.7</item>
        <item>833.3</item>
        <item>850.0</item>
        <item>866.7</item>
        <item>883.3</item>
        <item>900.0</item>
        <item>914.3</item>
        <item>928.6</item>
        <item>942.9</item>
        <item>957.1</item>
        <item>971.4</item>
        <item>985.7</item>
        <item>1000.0</item>
     </array>

    <!-- An array describing the screen's backlight values corresponding to the brightness
         values in the config_screenBrightnessNits array.
         This array should be equal in size to config_screenBrightnessBacklight. -->
    <array name="config_screenBrightnessBacklight">
        <item>1</item>
        <item>255</item>
    </array>

    <!-- An array of floats describing the screen brightness in nits corresponding to the backlight
         values in the config_screenBrightnessBacklight array.  On OLED displays these  values
         should be measured with an all white image while the display is in the fully on state.
         Note that this value should *not* reflect the maximum brightness value for any high
         brightness modes but only the maximum brightness value obtainable in a sustainable manner.
         This array should be equal in size to config_screenBrightnessBacklight -->
    <array name="config_screenBrightnessNits">
        <item>4.5</item>
        <item>1000</item>
    </array>

    <!-- Array of light sensor lux values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 control points as follows:
         (1-based arrays)
         Point 1:            (0, value[1]):             lux <= 0
         Point 2:     (level[1], value[2]):  0        < lux <= level[1]
         Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
         ...
         Point N+1: (level[N], value[N+1]):  level[N] < lux
         The control points must be strictly increasing.  Each control point
         corresponds to an entry in the brightness backlight values arrays.
         For example, if lux == level[1] (first element of the levels array)
         then the brightness will be determined by value[2] (second element
         of the brightness values array).
         Spline interpolation is used to determine the auto-brightness
         backlight values for lux levels between these control points.
         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>1</item>
        <item>2</item>
        <item>4</item>
        <item>6</item>
        <item>8</item>
        <item>10</item>
        <item>15</item>
        <item>20</item>
        <item>25</item>
        <item>30</item>
        <item>35</item>
        <item>40</item>
        <item>45</item>
        <item>50</item>
        <item>55</item>
        <item>60</item>
        <item>65</item>
        <item>70</item>
        <item>75</item>
        <item>80</item>
        <item>85</item>
        <item>90</item>
        <item>95</item>
        <item>100</item>
        <item>120</item>
        <item>140</item>
        <item>160</item>
        <item>180</item>
        <item>200</item>
        <item>220</item>
        <item>240</item>
        <item>260</item>
        <item>280</item>
        <item>300</item>
        <item>320</item>
        <item>340</item>
        <item>360</item>
        <item>380</item>
        <item>400</item>
        <item>420</item>
        <item>440</item>
        <item>460</item>
        <item>480</item>
        <item>500</item>
        <item>700</item>
        <item>900</item>
        <item>1100</item>
        <item>1300</item>
        <item>1500</item>
        <item>1700</item>
        <item>1900</item>
        <item>2000</item>
        <item>2500</item>
        <item>3000</item>
        <item>3500</item>
        <item>4000</item>
        <item>4500</item>
        <item>5000</item>
        <item>5500</item>
        <item>6000</item>
        <item>6500</item>
        <item>7000</item>
        <item>7500</item>
        <item>8000</item>
        <item>8500</item>
        <item>9000</item>
        <item>9500</item>
        <item>10000</item>
        <item>10500</item>
        <item>11000</item>
        <item>11500</item>
        <item>12000</item>
        <item>12500</item>
        <item>13000</item>
        <item>13500</item>
        <item>14000</item>
        <item>14500</item>
        <item>15000</item>
        <item>16000</item>
        <item>17000</item>
        <item>18000</item>
        <item>19000</item>
        <item>20000</item>
        <item>21000</item>
        <item>22000</item>
        <item>23000</item>
        <item>24000</item>
        <item>25000</item>
        <item>26000</item>
        <item>27000</item>
        <item>28000</item>
        <item>29000</item>
        <item>30000</item>
        <item>35000</item>
        <item>40000</item>
        <item>45000</item>
        <item>50000</item>
        <item>55000</item>
        <item>60000</item>
        <item>65000</item>
        <item>70000</item>
        <item>75000</item>
        <item>80000</item>
        <item>85000</item>
        <item>90000</item>
        <item>95000</item>
        <item>100000</item>
    </integer-array>

     <!-- Default files to pin via Pinner Service -->
     <string-array name="config_defaultPinnerServiceFiles">
        <item>/system/framework/arm64/boot-framework.oat</item>
        <item>/system/framework/arm64/boot-QPerformance.oat</item>
        <item>/system/framework/arm64/boot-UxPerformance.oat</item>
        <item>/system/framework/framework.jar</item>
        <item>/system/framework/oat/arm64/services.odex</item>
        <item>/system/framework/services.jar</item>
        <item>/system/bin/surfaceflinger</item>
     </string-array>

     <!-- Flag indicating whether we should enable the automatic brightness.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
     <bool name="config_automatic_brightness_available">true</bool>

     <!-- ComponentName of a dream to show whenever the system would otherwise have
          gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
          try to start this dream if possible.  The dream should typically call startDozing()
          to put the display into a low power state and allow the application processor
          to be suspended.  When the dream ends, the system will go to sleep as usual.
          Specify the component name or an empty string if none.
          Note that doze dreams are not subject to the same start conditions as ordinary dreams.
          Doze dreams will run whenever the power manager is in a dozing state. -->
     <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>

     <!-- Control whether the always on display mode is available. This should only be enabled on
         devices where the display has been tuned to be power efficient in DOZE and/or DOZE_SUSPEND
         states. -->
     <bool name="config_dozeAlwaysOnDisplayAvailable">true</bool>
     
     <!-- Control whether the always on display mode is enabled by default. This value will be used
         during initialization when the setting is still null. -->
     <bool name="config_dozeAlwaysOnEnabled">false</bool>

     <!-- Doze: should the TYPE_PICK_UP_GESTURE sensor be used as a pulse signal. -->
     <bool name="config_dozePulsePickup">true</bool>

     <!-- True if the display hardware only has brightness buckets rather than a full range of
          backlight values -->
     <bool name="config_displayBrightnessBucketsInDoze">true</bool>

     <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. -->
     <bool name="config_showNavigationBar">true</bool>

     <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
         on the headphone/microphone jack. When false use the older uevent framework. -->
     <bool name="config_useDevInputEventForAudioJack">true</bool>

     <!-- The maximum range of gamma adjustment possible using the screen
          auto-brightness adjustment setting. -->
     <fraction name="config_autoBrightnessAdjustmentMaxGamma">100.0%</fraction>

     <!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used
          for debouncing the light sensor.  Different constants are used to debounce the light sensor
          when adapting to brighter or darker environments.  This parameter controls how quickly
          brightness changes occur in response to an observed change in light level that exceeds the
          hysteresis threshold. -->
     <integer name="config_autoBrightnessBrighteningLightDebounce">1000</integer>
     <integer name="config_autoBrightnessDarkeningLightDebounce">1000</integer>

     <!-- Idle current for bluetooth controller. 0 by default-->
     <integer translatable="false" name="config_bluetooth_idle_cur_ma">6</integer>

     <!-- Operating volatage for bluetooth controller. 0 by default-->
     <integer translatable="false" name="config_bluetooth_operating_voltage_mv">3700</integer>

     <!-- Rx current for bluetooth controller. 0 by default-->
     <integer translatable="false" name="config_bluetooth_rx_cur_ma">28</integer>

     <!-- Tx current for bluetooth controller. 0 by default-->
     <integer translatable="false" name="config_bluetooth_tx_cur_ma">36</integer>

     <!-- Fast brightness animation ramp rate in brightness units per second-->
     <integer translatable="false" name="config_brightness_ramp_rate_fast">2466</integer>

     <!-- Slow brightness animation ramp rate in brightness units per second-->
     <integer translatable="false" name="config_brightness_ramp_rate_slow">1973</integer>

     <!-- Screen brightness used to dim the screen when the user activity
          timeout expires.  May be less than the minimum allowed brightness setting
          that can be set by the user. -->
     <integer name="config_screenBrightnessDim">13</integer>
     <item type="dimen" name="config_screenBrightnessDimFloat">0.00415140415</item>

     <!-- Screen brightness used to dim the screen while dozing in a very low power state.
          May be less than the minimum allowed brightness setting
          that can be set by the user. -->
     <integer name="config_screenBrightnessDoze">17</integer>
     <item type="dimen" name="config_screenBrightnessDozeFloat">0.00317460317</item>

     <!-- Minimum screen brightness setting allowed by power manager.
          The user is forbidden from setting the brightness below this level.
          Equivalent to 10/4095. -->
     <item name="config_screenBrightnessSettingMinimumFloat" format="float" type="dimen">0.00244200244</item>

     <!-- Maximum screen brightness allowed by the power manager.
          The user is forbidden from setting the brightness above this level.  -->
     <item name="config_screenBrightnessSettingMaximumFloat" format="float" type="dimen">1.0</item>

     <!-- Default screen brightness setting
          Must be in the range specified by minimum and maximum.
          Equivalent to 307/4095 (default for this device)    -->
     <item name="config_screenBrightnessSettingDefaultFloat" format="float" type="dimen">0.07496947496</item>

     <!-- Default screen brightness for VR setting as a float.
          Equivalent to 86/255-->
     <item name="config_screenBrightnessSettingForVrDefaultFloat" format="float" type="dimen">-2.0</item>

     <!-- Maximum screen brightness setting allowed for VR as float. -->
     <item name="config_screenBrightnessSettingForVrMaximumFloat" format="float" type="dimen">-2.0</item>

     <!-- Minimum screen brightness setting allowed for VR. Device panels start increasing pulse
          width as brightness decreases below this threshold as float.
          Equivalent to 79/255 -->
     <item name="config_screenBrightnessSettingForVrMinimumFloat" format="float" type="dimen">-2.0</item>

     <!-- Shutdown if the battery temperature exceeds (this value * 0.1) Celsius. -->
     <integer name="config_shutdownBatteryTemperature">600</integer>

     <!-- The default refresh rate. lisa manages this using the peak refresh rate setting, so set
         this value to 0 so it has no effect. -->
     <integer name="config_defaultRefreshRate">0</integer>

     <!-- The default peak refresh rate. -->
     <integer name="config_defaultPeakRefreshRate">90</integer>

     <!-- If true, the display will be shifted around in ambient mode. -->
     <bool name="config_enableBurnInProtection">true</bool>

     <!-- Whether device supports double tap to wake -->
     <bool name="config_supportDoubleTapWake">true</bool>

     <!-- Indicate available ColorDisplayManager.COLOR_MODE_xxx. -->
     <integer-array name="config_availableColorModes">
         <item>0</item>
         <item>1</item>
         <item>3</item>
     </integer-array>

     <!-- List of biometric sensors on the device, in decreasing strength. Consumed by AuthService
          when registering authenticators with BiometricService. Format must be ID:Modality:Strength,
          where: IDs are unique per device, Modality as defined in BiometricAuthenticator.java,
          and Strength as defined in Authenticators.java -->
     <string-array name="config_biometric_sensors" translatable="false" >
         <!-- ID0:Fingerprint:Strong -->
         <item>0:2:15</item>
     </string-array>

     <!-- Whether WiFi display is supported by this device.
          There are many prerequisites for this feature to work correctly.
          Here are a few of them:
          * The WiFi radio must support WiFi P2P.
          * The WiFi radio must support concurrent connections to the WiFi display and
            to an access point.
          * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
            remote submix module.  This module is used to record and stream system
            audio output to the WiFi display encoder in the media server.
          * The remote submix module "audio.r_submix.default" must be installed on the device.
          * The device must be provisioned with HDCP keys (for protected content).
     -->
     <bool name="config_enableWifiDisplay">true</bool>    

     <!-- Set to true if the wifi display supports compositing content stored
          in gralloc protected buffers.  For this to be true, there must exist
          a protected hardware path for surface flinger to composite and send
          protected buffers to the wifi display video encoder.
          If this flag is false, we advise applications not to use protected
          buffers (if possible) when presenting content to a wifi display because
          the content may be blanked.
          This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS}
          flag is set for wifi displays.
     -->
     <bool name="config_wifiDisplaySupportsProtectedBuffers">false</bool>

     <!-- Power Management: Specifies whether to decouple the auto-suspend state of the
          device from the display on/off state.
          When false, autosuspend_disable() will be called before the display is turned on
          and autosuspend_enable() will be called after the display is turned off.
          This mode provides best compatibility for devices using legacy power management
          features such as early suspend / late resume.
          When true, autosuspend_display() and autosuspend_enable() will be called
          independently of whether the display is being turned on or off.  This mode
          enables the power manager to suspend the application processor while the
          display is on.
          This resource should be set to "true" when a doze component has been specified
          to maximize power savings but not all devices support it.
          Refer to autosuspend.h for details.
     -->
     <bool name="config_powerDecoupleAutoSuspendModeFromDisplay">true</bool>

     <!-- If true, the doze component is not started until after the screen has been
          turned off and the screen off animation has been performed. -->
     <bool name="config_dozeAfterScreenOffByDefault">true</bool>

     <!-- An array of arrays of side fingerprint sensor properties relative to each display.
          Note: this value is temporary and is expected to be queried directly
          from the HAL in the future. -->
     <array name="config_sfps_sensor_props" translatable="false">
         <item>@array/config_sfps_sensor_props_0</item>
     </array>

     <array name="config_sfps_sensor_props_0" translatable="false">
         <item>local:4630946480857061762</item> <!--item>displayId</item-->
         <item>1080</item> <!--item>sensorLocationX</item-->
         <item>970</item> <!--item>sensorLocationY</item-->
         <item>200</item> <!--item>sensorRadius</item-->
     </array>

     <!-- Boolean indicating whether the HWC setColorTransform function can be performed efficiently
          in hardware. -->
     <bool name="config_setColorTransformAccelerated">true</bool>

</resources>
